[
  {
    "objectID": "modules.html",
    "href": "modules.html",
    "title": "Module Setup and Submission",
    "section": "",
    "text": "We’re using Git and GitHub for setting up and submitting modules. Git is a version control system for tracking changes you make to files. GitHub is a hosting service for distributing Git repositories. These tools are essential for collaborative coding projects and it’s important to your development as a data scientist that you learn how to use them.\nThat said, Git and GitHub have a difficult learning curve. In this course, we’re going to limit ourselves to using some basic features. In future courses or when you’re doing research in a lab, you’ll have opportunities to learn more advanced Git and GitHub workflows. For more information about how data scientists use Git and GitHub, I recommend reading Bryan (2018).\nIn brief, module setup has two steps and submission has three.\n\nCreate your own remote repo on GitHub from the module template repo.\nCreate your local repo by cloning your remote to your computer.\n\nNow your computer is set up for the module. Complete the activity according to the instructions on the course website. When you’re done, proceed to the following steps.\n\nCommit your changes in the local repo.\nPush your local commit to the remote repo.\nOpen an Issue on GitHub and tag the instructors.\n\n\n  \n  \n\n\n\n\n\n\n\nImportant\n\n\n\nThere’s a decent chance these instructions feel overwhelming. It’s true, there’s a lot to learn even to set up and submit your modules - certainly trickier than uploading a PDF to Canvas. I encourage you to stick with it! After you set up and submit a couple modules you’ll feel a lot more confident, and by the end of the quarter you’ll have gained valuable experience with an important data science tool."
  },
  {
    "objectID": "modules.html#overview",
    "href": "modules.html#overview",
    "title": "Module Setup and Submission",
    "section": "",
    "text": "We’re using Git and GitHub for setting up and submitting modules. Git is a version control system for tracking changes you make to files. GitHub is a hosting service for distributing Git repositories. These tools are essential for collaborative coding projects and it’s important to your development as a data scientist that you learn how to use them.\nThat said, Git and GitHub have a difficult learning curve. In this course, we’re going to limit ourselves to using some basic features. In future courses or when you’re doing research in a lab, you’ll have opportunities to learn more advanced Git and GitHub workflows. For more information about how data scientists use Git and GitHub, I recommend reading Bryan (2018).\nIn brief, module setup has two steps and submission has three.\n\nCreate your own remote repo on GitHub from the module template repo.\nCreate your local repo by cloning your remote to your computer.\n\nNow your computer is set up for the module. Complete the activity according to the instructions on the course website. When you’re done, proceed to the following steps.\n\nCommit your changes in the local repo.\nPush your local commit to the remote repo.\nOpen an Issue on GitHub and tag the instructors.\n\n\n  \n  \n\n\n\n\n\n\n\nImportant\n\n\n\nThere’s a decent chance these instructions feel overwhelming. It’s true, there’s a lot to learn even to set up and submit your modules - certainly trickier than uploading a PDF to Canvas. I encourage you to stick with it! After you set up and submit a couple modules you’ll feel a lot more confident, and by the end of the quarter you’ll have gained valuable experience with an important data science tool."
  },
  {
    "objectID": "modules.html#module-setup",
    "href": "modules.html#module-setup",
    "title": "Module Setup and Submission",
    "section": "Module setup",
    "text": "Module setup\n\nStep 1: Create your remote\nNavigate to the template repo on GitHub. Click on Use this template &gt; Create a new repository.\n\nFill out the “Create a new repository” form. The only field you need to fill out is “Repository name”. Make it match the module repository name (e.g., prog101). Click on the green “Create repository” button. Once GitHub creates the repo, you should see a URL that looks like “github.com/[your username]/[module name]”.\n\n\nStep 2: Clone your local repo\nCopy your remote repo’s URL (A) then switch over to RStudio and create a new RStudio project (B). In the New Project Wizard, choose Version Control &gt; Git then paste your URL and choose the local directory where you want to keep your local repositories (C-E). After clicking Create Project, RStudio will relaunch; you should see the project name updated in the top right and the Files pane should show the files from the template repo (F).\n\nAt this point you’re ready to work on the module. You have a local Git repository on your machine that is connected to your remote repository on GitHub."
  },
  {
    "objectID": "modules.html#module-submission",
    "href": "modules.html#module-submission",
    "title": "Module Setup and Submission",
    "section": "Module submission",
    "text": "Module submission\nWe’ll use GitHub Desktop for steps 3 and 4. Make sure GitHub Desktop recognizes your repo.\n\n\nStep 3: Commit your changes\nAfter you complete the module it’s time to commit your changes. This updates your local repository. In GitHub Desktop, you should see a list of files with changes on the left and the line-by-line differences on the right. Fill in the commit message below and hit the blue Commit to main button.\n\n\n\nStep 4: Push your commits\nAfter committing, you should no longer see any changed files. Click the Push origin button (A). This updates your remote repo on GitHub, which you can see online (B).\n\n\n\nStep 5: Open an Issue\nClick the Issues tab on GitHub (in the browser) and create a new Issue. Mention me (@FlukeAndFeather) in the Issue, which will let me know you’ve submitted your module. If you’re submitting the in-class portion for your pair, mention them as well. Congrats! You’re done!"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Intro to Marine Data Science",
    "section": "",
    "text": "Data science merges computer science and statistics with a particular field of study. In our case, that particular field of study is marine science. You and your classmates will explore examples from marine research to learn data science skills and tools.\n\n\n\nComputational thinking and writing code (Programming)\nDescribing and simulating data (Probability and statistics)\nOrganizing, sharing, and finding data (Informatics)\nCommunicating your results and data science workflow (Communication)\n\n\n\n\nIntro to Marine Data Science is a self-directed, mastery-oriented class. As your instructor, I want you to take ownership for your learning and focus on mastering the skills that excite you. That’s hard to do in traditional class formats because you’re all entering this class with diverse experiences, interests, and goals.\nThis class has an experimental format. There are more lessons available to you on this course website than I expect you to complete in one quarter. Your task is to choose the lessons that match your interests and goals, and work through them with a partner. Each lesson has readings and/or recorded lectures, and exercises for you to complete before class. In class, you’ll apply the skills from that lesson to real-world questions, like:\n\nWhere are the world’s oceans warming the fastest?\nAre deep-sea fish and invertebrates important prey for marine predators?\nHow can we fill in the at-sea data collection gaps caused by Covid?"
  },
  {
    "objectID": "index.html#course-description",
    "href": "index.html#course-description",
    "title": "Intro to Marine Data Science",
    "section": "",
    "text": "Data science merges computer science and statistics with a particular field of study. In our case, that particular field of study is marine science. You and your classmates will explore examples from marine research to learn data science skills and tools.\n\n\n\nComputational thinking and writing code (Programming)\nDescribing and simulating data (Probability and statistics)\nOrganizing, sharing, and finding data (Informatics)\nCommunicating your results and data science workflow (Communication)\n\n\n\n\nIntro to Marine Data Science is a self-directed, mastery-oriented class. As your instructor, I want you to take ownership for your learning and focus on mastering the skills that excite you. That’s hard to do in traditional class formats because you’re all entering this class with diverse experiences, interests, and goals.\nThis class has an experimental format. There are more lessons available to you on this course website than I expect you to complete in one quarter. Your task is to choose the lessons that match your interests and goals, and work through them with a partner. Each lesson has readings and/or recorded lectures, and exercises for you to complete before class. In class, you’ll apply the skills from that lesson to real-world questions, like:\n\nWhere are the world’s oceans warming the fastest?\nAre deep-sea fish and invertebrates important prey for marine predators?\nHow can we fill in the at-sea data collection gaps caused by Covid?"
  },
  {
    "objectID": "index.html#teaching-team",
    "href": "index.html#teaching-team",
    "title": "Intro to Marine Data Science",
    "section": "Teaching Team",
    "text": "Teaching Team\n\n\n\nInstructor\n\n\n\n\n\n\n\n\n\n\n\nMax Czapanskiy\nEmail: maxczap@ucsb.edu\n\n\n\n\nLearning Assistant\n\n\n\n\n\n\n\n\n\n\n\nHayden Vega\nEmail: haydenvega@umail.ucsb.edu"
  },
  {
    "objectID": "course-setup.html",
    "href": "course-setup.html",
    "title": "Course Setup Instructions",
    "section": "",
    "text": "This document will guide you to set up your computer for this course."
  },
  {
    "objectID": "course-setup.html#r-and-rstudio",
    "href": "course-setup.html#r-and-rstudio",
    "title": "Course Setup Instructions",
    "section": "R and RStudio",
    "text": "R and RStudio\nR is the programming language we’ll be using and RStudio is the interactive development environment we’ll use for writing and running code.\nGo to the RStudio installation page and install R first, then RStudio1.\nInstall the course companion package. Open RStudio and run the following commands in the Console pane:\ninstall.packages(\"remotes\")\nremotes::install_github(\"MarineCS-100B/marinecs100b\")"
  },
  {
    "objectID": "course-setup.html#git-and-github",
    "href": "course-setup.html#git-and-github",
    "title": "Course Setup Instructions",
    "section": "Git and GitHub",
    "text": "Git and GitHub\nGit is a version control system for keeping track of files and GitHub is an online hosting service for Git repositories. They’re important tools for data scientists and you’ll use them for submitting modules this quarter.\n\nGit on Windows\nInstall Git for Windows.\n\n\nGit on Mac\nInstall the Xcode Command Line Tools (which include Git). Open Terminal and run this command:\nxcode-select --install\n\n\nGitHub account\nWhile Git is installing, go to GitHub and create an account. Then install GitHub Desktop."
  },
  {
    "objectID": "course-setup.html#footnotes",
    "href": "course-setup.html#footnotes",
    "title": "Course Setup Instructions",
    "section": "Footnotes",
    "text": "Footnotes\n\n\nIf you’re on a Mac, make sure you drag the application to your Application folder and eject the DMG. Don’t run RStudio directly from the DMG. Raise your hand if you have questions about this part!↩︎"
  },
  {
    "objectID": "tracks/prog/prog101.html",
    "href": "tracks/prog/prog101.html",
    "title": "PROG101: Intro to R and RStudio",
    "section": "",
    "text": "This is the first module of the Programming track. By the end of this module, you’ll learn how to:"
  },
  {
    "objectID": "tracks/prog/prog101.html#pre-class-preparation",
    "href": "tracks/prog/prog101.html#pre-class-preparation",
    "title": "PROG101: Intro to R and RStudio",
    "section": "Pre-class preparation",
    "text": "Pre-class preparation\nSet up the PROG101 module on your computer (see Module Setup and Submission). There you’ll find the guided notes and exercises to accompany these recorded lectures.\n\n Lectures\n\nIntroduction to R and RStudio\n\n\n\nExpressions and variables\n\n\n\nUsing functions\n\n\n\nBasic vectors\n\n\n\nWorking with multiple vectors"
  },
  {
    "objectID": "tracks/prog/prog101.html#in-class-activity",
    "href": "tracks/prog/prog101.html#in-class-activity",
    "title": "PROG101: Intro to R and RStudio",
    "section": "In-class activity",
    "text": "In-class activity\n\nExtreme temperatures in an Alaskan intertidal zone\nThe intertidal zone is where the marine and terrestrial biomes meet. Organisms in this habitat must be able to withstand saltwater immersion, air exposure, and the impact of crashing waves. Some intertidal species are particularly important to both human and ecological communities, including bivalve shellfish like oysters, clams, and mussels. Bivalves may experience direct negative impacts from rising ocean temperatures, but they may receive indirect positive impacts from declining predator populations. From 2014-2016, an extreme marine heatwave gripped the North Pacific, popularly called “The Blob”. Around the same time, in 2013-2014, an outbreak of sea star wasting disease decimated sea stars along the North American Pacific coast, dramatically reducing the populations of these important bivalve predators. These two events could potentially push Alaskan mussel populations in opposing directions, which raises the question: have bivalves been winners or losers in a changing climate? Traiger et al. investigated this question using long-term monitoring data collected around the Gulf of Alaska (Traiger et al. 2022). Key to their study was an analysis of extreme air temperature. In this activity, you will replicate that part of their methods. Follow the assignment submission guidelines when you’ve completed this activity.\n\n\n\n\n\n\nNote\n\n\n\nThe template repository for this module is available at MarineCS-100B/prog101.\n\n\n\n\nGuiding questions\nRead the abstract and sections 2-2.1 of the methods in Traiger et al., then answer the following questions.\n\nWhat does KEFJ stand for?\nHow was temperature monitored?\nWhat’s the difference between absolute temperature and temperature anomaly?\n\n\n\nBegin exploring\nThe temperature and associated data from KEFJ is available in the marinecs100b R package. Use ?kefj to open the help page for these data.\n\nHow many kefj_* vectors are there?\nHow long are they?\nWhat do they represent?\n\nNow it’s time to begin coding! I want you to figure out the most common sampling interval for the temperature readings. First, sketch a plan on a piece of paper. Which vectors will you need to use? How are they related to each other? What operators or functions will you need?\n\n\n\n\n\n\nTip\n\n\n\nThe function table() will help you out here.\n\n\nNow, fill in the blanks below to get the most common sampling interval. Add comments describing what each line of code does.\n\n???_datetime &lt;- kefj_datetime[kefj_site == ???]\n???_interval &lt;- ???_datetime[???:???] - ???_datetime[???:???]\nt???e(???)\n\n\n\n\n\n\n\nNote\n\n\n\nThis is your first time dealing with dates and times in R. It’s going to take you a while to get used to them and you’ll definitely pull some hair out along the way. “Why isn’t this simpler??” you’ll ask. I wish it could be! But unfortunately we humans treat time in super weird ways and it’s next to impossible to represent it simply. Read “UTC is enough for everyone …right?” by Zach Holman for a humorous (if crass) breakdown of how we got into such a tangled situation.\n\n\n\n\nProblem decomposition\nLook how big the kefj_* vectors are. That’s way too big to tackle all at once! It’s always a good idea to break big, intractable problems down into smaller, digestible components. Let’s begin by finding the hottest and coldest air temperature readings in the dataset. When and where did these extremes happen? Use plot_kefj() to visualize the temperature readings for the days containing those readings. Before you start filling in the blanks in the code below, first sketch your plan for answering these questions. Make sure to consider which vectors you’ll need and how they relate to each other! When you start filling in the code below, add comments to each line of code describing what it does.\n\n\n\n\n\n\nTip\n\n\n\nCheck out which.min() and which.max()\n\n\n\n\n\n\n\n\nImportant\n\n\n\nThis code chunk introduces two new things in R.\nas.POSIXct() is a function for creating vectors that R recognizes as dates and times. For example, to create a variable representing noon on January 1, 2025 you could write jan1_2025 &lt;- as.POSIXct(\"2025-01-1 12:00\"). The tz argument specifies the timezone. \"Etc/GMT+8\" is the timezone the kefj data were collected in.\n& represents “and”. It’s how you combine multiple conditions that have to be true. For example, let’s say I have four people of different ages represented by these vectors:\npeople &lt;- c(\"Alice\", \"Bob\", \"Carla\", \"Danielle\")\nages &lt;- c(19, 16, 22, 29)\nThen I can find which people are older than 20 and younger than 25 like this:\npeople[ages &gt; 20 & ages &lt; 25]\n\n\n\n# Plot the hottest day\n\nhottest_idx &lt;- ???(kefj_temperature)\nhottest_time &lt;- ???[hottest_idx]\n??? &lt;- kefj_site[???]\nhotday_start &lt;- as.POSIXct(\"???\", tz = \"Etc/GMT+8\")\nhotday_end &lt;- as.POSIXct(\"???\", tz = \"Etc/GMT+8\")\nhotday_idx &lt;- ??? == hottest_site &\n  ??? &gt;= hotday_start &\n  ??? &lt;= hotday_end\nhotday_datetime &lt;- ???[hotday_idx]\nhotday_temperature &lt;- ???\nhotday_exposure &lt;- ???\nplot_kefj(???, ???, ???)\n\n# Repeat for the coldest day\n\nExamine your visualizations. What patterns do you notice in time, temperature, and exposure? Do those patterns match your intuition, or do they differ?\nNow that you’ve visualized the extreme temperatures you’re ready to begin calculating extreme temperature exposure. Re-read section 2.1 of Traiger et al. How did they define extreme heat exposure? Translate their written description to code and calculate the extreme heat exposure for the hottest day. Compare your answer to the visualization you made. Does it look right to you? Repeat this process for extreme cold exposure on the coldest day.\n\n\nPutting it back together (optional)\nYou’ll see more about problem decomposition in PROG103. If you’d like a preview, try the following.\nLet’s go from analyzing a single day to a whole season. Re-read how Traiger et al. quantified extreme hot and cold air temperature exposures at the seasonal scale. Make a sketch of how you would do that for a single site and season.\nPick one site and one season. What were the extreme heat and cold exposure at that site in that season? Repeat for a different site and a different season.\nTraiger et al. also calculated water temperature anomalies. Consider how you could do that. Make a sketch showing which vectors you would need and how you would use them. Write code to get the temperature anomalies for one site in one season in one year."
  },
  {
    "objectID": "tracks/prog/prog101.html#recap-and-next-steps",
    "href": "tracks/prog/prog101.html#recap-and-next-steps",
    "title": "PROG101: Intro to R and RStudio",
    "section": "Recap and next steps",
    "text": "Recap and next steps\nIn this module you started using R to represent and manipulate data. That’s a critical skill for a marine data scientist!\nFuture modules in this track will build on what you’ve learned here.\n\nIn this module, you called built-in R functions like which.min() and table(). In PROG102 you’ll learn how to write your own functions to encapsulate tasks like calculating extreme temperature exposure.\nPROG103 will cover branches and loops. Recall how you had to copy-paste-edit code in this module to apply the same task to different inputs (e.g., extreme hot vs extreme cold, one site vs another). That’s a time-consuming and error-prone way of doing things. Branches and loops are the solution for making choices and repeating operations.\n\nFill out the PROG101 reflection to complete this module. Well done!"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "pair-programming.html",
    "href": "pair-programming.html",
    "title": "Pair Programming",
    "section": "",
    "text": "We’re using pair programming for the in-class parts of modules. As the name suggests, pair programming is when two programmers write code together. Research shows that pair programming leads to better quality code in less time, so it’s popular in some software development circles. More importantly for you, it’s also been demonstrated that pair programming is an excellent learning tool (Hanks et al. 2011). There are lots of reasons pair programming helps learning. For example:"
  },
  {
    "objectID": "pair-programming.html#pair-programming-in-practice",
    "href": "pair-programming.html#pair-programming-in-practice",
    "title": "Pair Programming",
    "section": "Pair programming in practice",
    "text": "Pair programming in practice\nHere’s how we’ll use pair programming this quarter. Keep in mind: this is only for the in-class portion. The pre-class preparation (videos, notes, exercises) should be done individually.\n\nChoose a partner\nEach week you’ll form a pair with another student. There will be a question about who you’re working with on the end-of-week survey.\nHere are some important things to consider in choosing a partner:\n\nFind someone interested in similar modules as you are - you’ll be working on the same tasks together.\nPair programming works best when both partners have relatively similar experience levels with programming. I emphasize relative because no two of you are exactly the same. Slight differences are to be expected! However, a situation where one partner has substantial experience and the other is brand new will probably not work as well.\nI strongly encourage you to change partners every week! That may not always be possible based on module interest and experience level. However, when you can work with someone new please take that opportunity. Your learning will benefit from interacting the diversity of perspectives and experiences in the class.\n\n\n\nStart programming\n\nPut one laptop away. You’re both going to be working at one keyboard in one repository.\nChoose roles. One partner will be the driver and the other will be the navigator.\n\nThe driver’s primary responsibility is to type - you’ll be the one at the keyboard and focused on the in-the-weeds tasks.\nThe navigator’s primary responsibility is to talk - you’ll be guiding the conversation and staying focused on the big picture as the driver types.\nPrimary is emphasized because the line between the roles is fuzzy. The driver should be thinking critically and considering the whole of the problem. The navigator should be watching what the driver types and helping to find typos and other errors.\n\nSwitch roles every 20 minutes.\n\n\n\nSubmit the module\nBecause you’re both working at the same laptop, your repositories won’t match. Both of you should still submit your repositories on GitHub because I want to see both of your pre-class notes and exercises. Whichever partner’s repository contains the in-class part of the module should mention their partner in the issue they open to submit the repo."
  },
  {
    "objectID": "pair-programming.html#suggestions-for-effective-pair-programming",
    "href": "pair-programming.html#suggestions-for-effective-pair-programming",
    "title": "Pair Programming",
    "section": "Suggestions for effective pair programming",
    "text": "Suggestions for effective pair programming\n\nHave each others’ backs. You’re in this together! The most important way to support each other is coming to class ready to participate. The pre-class preparation is important for making sure you and your partner are both ready to collaborate. Give it your full attention.\nBe patient. When you’re new to coding, describing your ideas is really challenging. It’s natural to get frustrated when your partner doesn’t understand what you’re trying to tell them or vice versa. Figuring out how to articulate your ideas is important for learning how to do data science!\nTake breaks. Learning any skill, particularly technical skills, is mentally taxing. Your brain will saturate well before the end of a 75 minute class. Remind each other to get up, walk around, grab a drink of water - anything to unplug and reconnect."
  }
]